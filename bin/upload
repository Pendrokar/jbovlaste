#!/usr/bin/perl
#
# Copyright (C) 2012  Paul Wolneykien <manowar@altlinux.org>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

use strict;
use warnings;
use LWP::Simple;
use Getopt::Long 2.24 qw(GetOptions :config gnu_getopt);

STDOUT->autoflush(1);
STDERR->autoflush(1);

# Define help and usage procs.
# Process the command line  options.

(my $PROG = $0) =~ s#.*/##;
sub help {
    print STDERR <<EOF;
$PROG reads the given file with dictionary entries and for each entry
it sends a request to the jbovlaste-based online dictionary for check
and/or update.

Usage: $PROG [options] [FILE]

 * Options *

     -u NAME, --user=NAME     Name of the jbovlaste user to log in with.
     -p PASS, --passwd=PASS   User password.
     -D LANG, --definitions=LANG    Check/update the definitions.
     -U, --update             Make the update of the online dictionary.
     -L URL, --url=URL        Dictionary URL.
     -P, --plain-http         Do not use HTTPS.
     -N, --ignore-cert        Ignore SSL host certificate problems.
     -v, --verbose            Print more messages about the process.
     -q, --quiet              Do not output anything.
     -h, --help,--usage       Print this screen.

If FILE is omitted, then standard input is used.
EOF
	exit $_[0];
}

sub usage {
	print STDERR <<EOF;
Usage: $PROG [options] [FILE]
Pass -h, --help or --usage to see brief help screen.
EOF
	exit $_[0];
}

GetOptions
	"u|user=s"	=> \my $user,
	"p|passwd=s" => \my $pass,
	"D|definitions=s" => \my $use_definitions,
	"U|update" => \my $make_update,
	"L|url=s" => \my $url,
        "P|plain-http" => \my $plain_http,
        "N|ignore-cert" => \my $ignore_cert,
	"v|verbose+"    => \my $verbose,
        "q|quiet" => \my $quiet,
	"h|help|usage"	=> sub { help(0) }
	or usage(2);

# Clean/fix the parameters.
$verbose = 0 unless defined $verbose;
my $ret = 0;
$url = "https://jbovlaste.lojban.org" unless $url;
$url =~ s/\/+$//;
$user = "officialdata" unless $user;
$pass = "" unless $pass;
$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0 if $ignore_cert;
$url =~ s/^https/http/i if $plain_http;

# Connect to the dictionary, log in.

my $loggedin = 0;
my $browser = LWP::UserAgent->new (cookie_jar => {});
if ($verbose > 3) {
    $browser->add_handler("request_send",  sub { shift->dump(); return });
    $browser->add_handler("response_done", sub { shift->dump(); return });
}

my $currurl = "$url/login.html";
print STDERR "Try to log in to $currurl as $user\n" if $verbose > 1;
my $response = $browser->post ($currurl, [ 'username' => "$user", 'password' => "$pass" ]);
print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
if ($response->is_success()) {
    if ($response->content() =~ /You\s+are\s+logged\s+in\s+as:\s+(\S+)/) {
	$loggedin = 1;
	if ($1 ne $user) {
	    print "Error: Logged in as an other user: $1\n" unless $quiet;
	    $ret = 1;
	} else {
	    print "Logged in as $1\n" unless $quiet;
	}
    } else {
	print "Error: Unable to log in\n" unless $quiet;
	$ret = 2;
    }
} else {
    $ret = 3;
}

if ($ret != 0) {
    exit $ret;
}

my $infile = $ARGV[0] || "-";
if (not open (INFILE, "< $infile")) {
    if ($infile == "-") {
	die "Unable to open standard input for reading";
    } else {
	die "Unable to open file '$infile' for reading";
    }
}

my $ln = 0;
my $errs = 0;
my $defs = 0;
my $valsierrs = 0;
my $deferrs = 0;
my $defsubms = 0;
my $malforms = 0;
if ($use_definitions) {
    my $lang = $use_definitions;
    print "Selected language: $lang\n" unless $quiet;
    if ($verbose) {
	if ($infile eq "-") {
	    print STDERR "Read definitions from standard input\n" unless $quiet;
	} else {
	    print STDERR "Read definitions from '$infile'\n" unless $quiet;
	}
    }
    while ($ret == 0 && ($_ = <INFILE>)) {
	$ln++;
	if (/^([.'A-Za-z]+)\t([^\t]+)(\t(.*))?$/) {
	    $defs++;
	    my $valsi = trim ($1);
	    my $def = trim ($2);
	    my $notes = trim ($4) if $3;
	    print "$valsi: valsi check" unless $quiet;
	    my $currurl = "$url/dict/$valsi";
	    print STDERR "Try to access $currurl\n" if $verbose > 1;
	    my $response = $browser->get ($currurl);
	    print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
	    print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
	    if ($response->is_success()) {
		if ($response->content() =~ /Word\s+not\s+found!/) {
		    print " FAILED" unless $quiet;
		    $errs++;
		    $valsierrs++;
		} else {
		    print " OK definition check" unless $quiet;
		    my $valsiid;
		    my $langid;
		    my $action;
		    $ret = getdefids ($response->content(), $lang, \$currurl, \$valsiid, \$langid);
		    if ($ret == 0) {
			print STDERR "Try to check valsi and language at $currurl\n" if $verbose > 1;
			$response = $browser->post ($currurl, [ 'valsiid' => "$valsiid", 'langid' => "$langid" ]);
			print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
			print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
			if ($response->is_success()) {
			    if ($response->content() =~ /Adding\s+definition\s+for\s+"$valsi"\s+in\s+language\s+"$lang"/) {
				my %hidden = ();
				$ret = gethidden ($response->content(), "adddef.html", \$currurl, \%hidden);
				if ($ret == 0) {
				    print STDERR "Try to check the definition at $currurl\n" if $verbose > 1;
				    $response = $browser->post ($currurl, [ 'definitiontxt' => $def, 'notes' => $notes, 'check' => "Check Definition", %hidden ]);
				    print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
				    print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
				    if ($response->is_success()) {
					if ($response->content() !~ /WARNING/ && 
					    $response->content() =~ /name="final"\s+value="Submit Definition"/) {
					    print " OK" unless $quiet;
					    if ($make_update) {
						print " submit" unless $quiet;
						%hidden = ();
						$ret = gethidden ($response->content(), "adddef.html", \$currurl, \%hidden);
						if ($ret == 0) {
						    print STDERR "Try to submit the definition at $currurl\n" if $verbose > 1;
						    $response = $browser->post ($currurl, [ 'definitiontxt' => $def, 'notes' => $notes, 'final' => "Submit Definition", %hidden ]);
						    print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
						    print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
						    if ($response->is_success()) {
							if ($response->content() =~ /Processing\s+new\s+definition\s+for\s+"$valsi"/ &&
							    $response->content() =~ /If\s+you're\s+seeing\s+this,\s+it\s+probably\s+worked/) {
							    print " OK" unless $quiet;
							    $defsubms++;
							} else {
							    print " FAILED" unless $quiet;
							    $errs++;
							}
						    } else {
							print " ERROR" unless $quiet;
							$ret = 3;
						    }
						} else {
						    print " ERROR" unless $quiet;
						}
					    }
					} else {
					    print " FAILED" unless $quiet;
					    $errs++;
					    $deferrs++;
					}
				    } else {
					print " ERROR" unless $quiet;
					$ret = 3;
				    }
				} else {
				    print " ERROR" unless $quiet;
				}
			    } else {
				print " ERROR" unless $quiet;
				$ret = 6;
			    }
			} else {
			    print " ERROR" unless $quiet;
			    $ret = 3;
			}
		    } else {
			print " ERROR" unless $quiet;
		    }
		}
	    } else {
		print " ERROR" unless $quiet;
		$ret = 3;
	    }
	    print "\n" unless $quiet;
	} else {
	    print "Malformed definition on line $ln\n" unless $quiet;
	    $errs++;
	    $malforms++;
	}
    }
} else {
    usage (2);
}

    
unless ($quiet) {
    print "---\n";
    if ($defs > 0) {
	print "$defsubms of $defs definitions sumbitted\n";
	print "Valsi checks failed: $valsierrs\n";
	print "Definition checks failed: $deferrs\n";
    }
    if ($malforms > 0) {
	print "Malformed entries: $malforms\n";
    }
}

if ($ret == 0 && $errs > 0) {
    $ret = 127;
}
exit $ret;


# Log out before exit.
END {
    if ($loggedin) {
	$currurl = "$url/logout.html";
	print STDERR "Try to log out from $currurl\n" if $verbose > 1;
	$response = $browser->get ($currurl);
	print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
	print STDERR "---HTTP RESPONSE BEGIN---\n".$response->content()."\n---HTTP RESPONSE END---\n" if $verbose > 3;
	if ($response->is_success()) {
	    if ($response->content() =~ /You\s+are\s+not\s+.*logged\s+in/) {
		print "Log out successful\n" unless $quiet;
	    } else {
		print "Error: problems with loging out\n" unless $quiet;
		$ret = 5;
	    }
	} else {
	    $ret = 3;
	}
    } else {
	print STDERR "Not logged in: not bother to log out.\n" if $verbose > 1;
    }
    close (INFILE);
}

sub actionurl {
    my ($url, $action) = @_;

    if ($action =~ /^http/) {
	return $action;
    } elsif ($action =~ /^\//) {
	$url =~ s/^(https?:\/\/[^\/]+)\/?.*$/$1$action/;
    } else {
	$url =~ s/[^\/]+\/?$/$action/;
    }
    return $url;
}

sub gethidden {
    my ($page, $formname, $url, $hidden) = @_;

    if ($page =~ /<form\s+[^>]*action="($formname)"[^>]*>(.*)$/s) {
	$$url = actionurl ($$url, $1);
	
	while ($page =~ /(<input\s+[^>]*type="hidden"\s+[^>]*>)(.*)$/s) {
	    my $tag = $1;
	    $page = $2;
	    if ($tag =~ /name="([^"]+)"/s) {
		my $name = $1;
		$$hidden{$name} = "";
		if ($tag =~/value="([^"]*)"/s) {
		    my $val = $1;
		    print STDERR "Add hidden field: '$name' = '$val'\n" if $verbose > 2;
		    $$hidden{$name} = $val;
		}
	    } else {
		print STDERR "Malformed hidden field: $tag\n" unless $quiet;
	    }
	}
$page = $2;
    } else {
	print STDERR "Unable to find form '$formname'\n" unless $quiet;
	return 7;
    }

    return 0;
}

sub getdefids {
    my ($page, $lang, $url, $valsiid, $langid) = @_;

    if ($page =~ /<form\s+[^>]*action="([^"]*adddef\.html)"(.*)$/s) {
	print STDERR "Read action URL value: $1\n" if $verbose > 2;
	$$url = actionurl ($$url, $1);
	$page = $2;
	if ($page =~ /(<input\s+[^>]*name="valsiid"[^>]*>)(.*)$/s) {
	    my $tag = $1;
	    $page = $2;
	    if ($tag =~ /value="([^"]+)"/) {
		print STDERR "Read valsi ID value: $1\n" if $verbose > 2;
		$$valsiid = $1;
	    } else {
		print STDERR "Unable to find the valsiid value\n" unless $quiet;
		return 7;
	    }
            if ($page =~ /<select\s+[^>]*name="langid"[^>]*>(.*)$/s) {
		$page = $1;
		while ($page =~ /(.*)<\/?select[^>]*>.*$/s) {
		    $page = $1;
		}
	        while ($page =~ /<option\s+[^>]*value="([^"]+)"[^>]*>([^<]+)<\/option[^>]*>/sg) {
		    print STDERR "Read language ID value: $2 = $1\n" if $verbose > 2;
		    if ($2 eq $lang) {
			$$langid = $1;
			return 0;
		    }
		}
	    }
	    print STDERR "Unable to find ID for the language '$lang'\n" unless $quiet;
	    return 7;
        } else {
            print STDERR "Unable to find the valsiid value\n" unless $quiet;
            return 7;
        }
	return 0;
    } else {
	print STDERR "Unable to find 'adddef' form\n" unless $quiet;
	return 7;
    }
}

sub trim($)
{
    my $trim_string = shift;
    $trim_string =~ s/^\s+//;
    $trim_string =~ s/\s+$//;
    return $trim_string;
}
