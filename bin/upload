#!/usr/bin/perl
#
# Copyright (C) 2012  Paul Wolneykien <manowar@altlinux.org>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
#

use strict;
use warnings;
use LWP::Simple;
use Getopt::Long 2.24 qw(GetOptions :config gnu_getopt);

STDOUT->autoflush(1);
STDERR->autoflush(1);

# Define help and usage procs.
# Process the command line  options.

(my $PROG = $0) =~ s#.*/##;
sub help {
    print STDERR <<EOF;
$PROG reads the given file with dictionary entries and for each entry
it sends a request to the jbovlaste-based online dictionary for check
and/or update.

Usage: $PROG [options] [FILE]

 * Options *

     -u NAME, --user=NAME     Name of the jbovlaste user to log in with.
     -p PASS, --passwd=PASS   User password.
     -D LANG, --definitions=LANG    Check/update the definitions.
     -U, --update             Make the update of the online dictionary.
     -A, --add                Add new words (valsi).
     -W, --ignore-warnings    Ignore definition check warnings.
     -L URL, --url=URL        Dictionary URL.
     -P, --plain-http         Do not use HTTPS.
     -N, --ignore-cert        Ignore SSL host certificate problems.
     -v, --verbose            Print more messages about the process.
     -q, --quiet              Do not output anything.
     -h, --help,--usage       Print this screen.

If FILE is omitted, then standard input is used.
EOF
	exit $_[0];
}

sub usage {
	print STDERR <<EOF;
Usage: $PROG [options] [FILE]
Pass -h, --help or --usage to see brief help screen.
EOF
	exit $_[0];
}

my $verbose = 0;
GetOptions
	"u|user=s"	=> \my $user,
	"p|passwd=s" => \my $pass,
	"D|definitions=s" => \my $use_definitions,
	"U|update" => \my $make_update,
    "A|add" => \my $add_valsi,
    "W|ignore-warnings" => \my $ignore_warnings,
	"L|url=s" => \my $url,
        "P|plain-http" => \my $plain_http,
        "N|ignore-cert" => \my $ignore_cert,
	"v|verbose+"    => \$verbose,
        "q|quiet" => \my $quiet,
	"h|help|usage"	=> sub { help(0) }
	or usage(2);


# Clean/fix the parameters.
my $ret = 0;
$url = "https://jbovlaste.lojban.org" unless $url;
$url =~ s/\/+$//;
$user = "officialdata" unless $user;
$pass = "" unless $pass;
$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = 0 if $ignore_cert;
$url =~ s/^https/http/i if $plain_http;


# Set up the browser.

my $browser = LWP::UserAgent->new (cookie_jar => {});
if ($verbose > 3) {
    $browser->add_handler("request_send",  sub { shift->dump(); return });
    $browser->add_handler("response_done", sub { shift->dump(); return });
}


# Connect to the dictionary, log in.

my $loggedin = 0;
my $currurl = "$url/login.html";
$ret = browse (
    "Try to log in to $currurl as $user",
    sub {
	return $browser->post ($currurl,
			       [ 'username' => "$user",
				 'password' => "$pass" ]);
    },
    sub {
	my $response = shift;
	if ($response->content() =~ /You\s+are\s+logged\s+in\s+as:\s+(\S+)/) {
	    $loggedin = 1;
	    if ($1 ne $user) {
		print "Error: Logged in as an other user: $1\n" unless $quiet;
		return 1;
	    } else {
		print "Logged in as $1\n" unless $quiet;
		return 0;
	    }
	} else {
	    print "Error: Unable to log in\n" unless $quiet;
	    return 2;
	}
    });
exit $ret unless $ret == 0;


# Open the input file.

my $infile = $ARGV[0] || "-";
if (not open (INFILE, "< $infile")) {
    if ($infile == "-") {
	die "Unable to open standard input for reading\n";
    } else {
	die "Unable to open file '$infile' for reading\n";
    }
}


# Process the lines of input.

my $ln = 0;
my $errs = 0;
my $defs = 0;
my $valsierrs = 0;
my $deferrs = 0;
my $defsubms = 0;
my $malforms = 0;
if ($use_definitions) {
    my $lang = $use_definitions;

    print "Selected language: $lang\n" unless $quiet;
    if ($verbose) {
	if ($infile eq "-") {
	    print STDERR "Read definitions from standard input\n" unless $quiet;
	} else {
	    print STDERR "Read definitions from '$infile'\n" unless $quiet;
	}
    }

    my ($valsi, $def, $tags, $notes);
    while ($ret == 0 && ($_ = <INFILE>)) {
	$ln++;

	# Parse the next line of input.
	if (/^([.'A-Za-z]+)\t([^\t]+)(\t(.*))?$/) {
	    $defs++;
	    $valsi = trim ($1);
	    ($def, $tags) = extract_tags (trim ($2));
	    $notes = trim ($4) if $3;
	} else {
	    print STDERR "Malformed definition at input line $ln\n" if $verbose > 0;
	    $errs++;
	    $malforms++;
	    next;
	}

	# Process a valsi.
	print "$valsi: " unless $quiet;
	my $valsiid;
	my $langid;

	# Check is the valsi already in the dictionary.
	my $currurl = "$url/dict/$valsi";
	$ret = browse (
	    "Try to access $currurl",
	    sub {
		return $browser->get ($currurl);
	    },
	    sub {
		my $response = shift;
		if ($response->content() =~ /Word\s+not\s+found!/) {
		    $errs++;
		    $valsierrs++;
		    printf "FAILED (not found)\n" unless $quiet;
		    return 1;
		}
		return getdefids ($response->content(), $lang, \$currurl, \$valsiid, \$langid);
	    });
	next unless $ret == 0;

	# Check the valsiid and langid.
	my %hidden = ();
	$ret = browse (
	    "Try to check valsi and language at $currurl",
	    sub {
		return $browser->post (
		    $currurl,
		    [ 'valsiid' => "$valsiid",
		      'langid' => "$langid" ]);
	    },
	    sub {
		my $response = shift;
		if ($response->content() =~ /Adding\s+definition\s+for\s+"$valsi"\s+in\s+language\s+"$lang"/)
		{
		    return gethidden ($response->content(), "adddef.html", \$currurl,  \%hidden);
		} else {
		    printf " FAILED (unexpected page)\n" unless $quiet;
		    return 1;
		}
	    });
	next $ret unless $ret == 0;

	# Checking the definition.
	$ret = browse (
	    "Try to check the definition at $currurl",
	    sub {
		return $browser->post (
		    $currurl,
		    [ 'definitiontxt' => $def,
		      'notes' => $notes,
		      'check' => "Check Definition",
		      %hidden ]);
	    },
	    sub {
		my $response = shift;
		if (($response->content() !~ /WARNING/ || $ignore_warnings) && $response->content() =~ /name="final"\s+value="Submit Definition"/)
		{
		    print "CHECKED " unless $quiet;
		    if ($make_update) {
			%hidden = ();
			return gethidden ($response->content(), "adddef.html", \$currurl, \%hidden);
		    } else {
			print "\n" unless $quiet;
			return 1;
		    }
		} else {
		    print "FAILED (check)\n" unless $quiet;
		    return 1;
		}
	    });
	next unless $ret == 0;

	# Write the checked definition into the dictionary.
	$ret = browse (
	    "Try to submit the definition at $currurl",
	    sub {
		return $browser->post (
		    $currurl,
		    [ 'definitiontxt' => $def,
		      'notes' => $notes,
		      'final' => "Submit Definition",
		      %hidden ]);
	    },
	    sub {
		my $response = shift;
		if ($response->content() =~ /Processing\s+new\s+definition\s+for\s+"$valsi"/ && $response->content() =~ /If\s+you're\s+seeing\s+this,\s+it\s+probably\s+worked/) {
		    print "SUBMITTED\n" unless $quiet;
		    $defsubms++;
		    return 0;
		} else {
		    print "FAILED\n" unless $quiet;
		    $errs++;
		    return 1;
		}
	    });
    }
}


# Ouput the final report.
    
unless ($quiet) {
    print "\n---\n";
    print "$defsubms of $defs definitions sumbitted\n";
    print "Valsi checks failed: $valsierrs\n";
    print "Definition checks failed: $deferrs\n";
    print "Malformed entries: $malforms\n";
}

if ($ret == 0 && $errs > 0) {
    $ret = 127;
}
exit $ret;


# Log out before exit.
END {
    if ($loggedin) {
	$currurl = "$url/logout.html";
	browse (
	    "Try to log out from $currurl",
	    sub {
		return $browser->get ($currurl);
	    },
	    sub {
		my $response = shift;
		if ($response->content() =~ /You\s+are\s+not\s+.*logged\s+in/) {
		    print "Log out successful\n" unless $quiet;
		    return 0;
		} else {
		    print "Error: problems with loging out\n" unless $quiet;
		    return 1;
		}
	    });
    } else {
	print STDERR "\nNot logged in: not bother to log out.\n" if $verbose > 1;
    }
    close (INFILE);
}


# Various subroutines.

sub actionurl {
    my ($url, $action) = @_;

    if ($action =~ /^http/) {
	return $action;
    } elsif ($action =~ /^\//) {
	$url =~ s/^(https?:\/\/[^\/]+)\/?.*$/$1$action/;
    } else {
	$url =~ s/[^\/]+\/?$/$action/;
    }
    return $url;
}

sub gethidden {
    my ($page, $formname, $url, $hidden) = @_;

    if ($page =~ /<form\s+[^>]*action="($formname)"[^>]*>(.*)$/s) {
	$$url = actionurl ($$url, $1);
	
	while ($page =~ /(<input\s+[^>]*type="hidden"\s+[^>]*>)(.*)$/s) {
	    my $tag = $1;
	    $page = $2;
	    if ($tag =~ /name="([^"]+)"/s) {
		my $name = $1;
		$$hidden{$name} = "";
		if ($tag =~/value="([^"]*)"/s) {
		    my $val = $1;
		    print STDERR "\nAdd hidden field: '$name' = '$val'\n" if $verbose > 2;
		    $$hidden{$name} = $val;
		}
	    } else {
		print STDERR "\nMalformed hidden field: $tag\n" if $verbose > 2;
	    }
	}
	$page = $2;
    } else {
	die "\nUnable to find form '$formname'" unless $quiet;
    }

    return 0;
}

sub getdefids {
    my ($page, $lang, $url, $valsiid, $langid) = @_;

    if ($page =~ /<form\s+[^>]*action="([^"]*adddef\.html)"(.*)$/s) {
	print STDERR "\nRead action URL value: $1" if $verbose > 2;
	$$url = actionurl ($$url, $1);
	$page = $2;
	if ($page =~ /(<input\s+[^>]*name="valsiid"[^>]*>)(.*)$/s) {
	    my $tag = $1;
	    $page = $2;
	    if ($tag =~ /value="([^"]+)"/) {
		print STDERR "\nRead valsi ID value: $1\n" if $verbose > 2;
		$$valsiid = $1;
	    } else {
		die "\nUnable to find the valsiid value";
	    }
            if ($page =~ /<select\s+[^>]*name="langid"[^>]*>(.*)$/s) {
		$page = $1;
		while ($page =~ /(.*)<\/?select[^>]*>.*$/s) {
		    $page = $1;
		}
	        while ($page =~ /<option\s+[^>]*value="([^"]+)"[^>]*>([^<]+)<\/option[^>]*>/sg) {
		    print STDERR "Read language ID value: $2 = $1\n" if $verbose > 2;
		    if ($2 eq $lang) {
			$$langid = $1;
			return 0;
		    }
		}
	    }
	    die "\nUnable to find ID for the language '$lang'";
        } else {
            die "\nUnable to find the valsiid value";
        }

	return 0;
    } else {
	die "\nUnable to find 'adddef' form";
    }
}

sub trim {
    my $trim_string = shift;
    $trim_string =~ s/^\s+//;
    $trim_string =~ s/\s+$//;
    return $trim_string;
}

sub extract_tags {
    my $input = shift;
    my %tags = ();
    my $text = "";

    my $pos = 0;
    while ($input =~ m/\\([^{\s]+){([^}]+)}/g) {
	my $next = substr ($input, $pos, (pos ($input) - length ($&) - $pos));
	$pos = pos ($input);
	$tags{$1} = $2;
	$next =~ s/\s+$//;
	$text = $text.$next if length ($next);
    }
    if ($pos > 0) {
	$text = $text.substr($input, $pos);
    }

    return ($text, \%tags);
}

sub browse {
    my $msg = shift;
    my $action = shift;
    my $on_response = shift;

    print STDERR "\n$msg\n" if $verbose > 1;
    my $response = &$action ();
    print STDERR "Response ".$response->status_line()."\n" if $verbose > 1;
    print STDERR "---HTTP RESPONSE BEGIN---\n".trim($response->content())."\n---HTTP RESPONSE END---\n" if $verbose > 3;

    if ($response->is_success()) {
	return &$on_response ($response);
    } else {
	die "\nHTTP request error";
    }
}
